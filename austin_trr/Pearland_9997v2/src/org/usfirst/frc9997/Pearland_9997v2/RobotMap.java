// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc9997.Pearland_9997v2;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController kickerGreenKickerMotor;
    public static SpeedController driveLeftFrontBrown;
    public static SpeedController driveLeftRearWhite;
    public static SpeedController driveRightRearBlue;
    public static SpeedController driveRightFrontOrange;
    public static RobotDrive driveRobotDrive41;
    public static SpeedController ballGrabberRightArm;
    public static SpeedController ballGrabberLeftArm;
    public static Compressor pneumaticsCompressor;
    public static Encoder feedbackQuadEnc1;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        kickerGreenKickerMotor = new Talon(1, 5);
	LiveWindow.addActuator("Kicker", "GreenKickerMotor", (Talon) kickerGreenKickerMotor);
        
        driveLeftFrontBrown = new Talon(1, 4);
	LiveWindow.addActuator("Drive", "LeftFrontBrown", (Talon) driveLeftFrontBrown);
        
        driveLeftRearWhite = new Talon(1, 1);
	LiveWindow.addActuator("Drive", "LeftRearWhite", (Talon) driveLeftRearWhite);
        
        driveRightRearBlue = new Talon(1, 3);
	LiveWindow.addActuator("Drive", "RightRearBlue", (Talon) driveRightRearBlue);
        
        driveRightFrontOrange = new Talon(1, 2);
	LiveWindow.addActuator("Drive", "RightFrontOrange", (Talon) driveRightFrontOrange);
        
        driveRobotDrive41 = new RobotDrive(driveLeftFrontBrown, driveLeftRearWhite,
              driveRightFrontOrange, driveRightRearBlue);
	
        driveRobotDrive41.setSafetyEnabled(true);
        driveRobotDrive41.setExpiration(0.1);
        driveRobotDrive41.setSensitivity(0.5);
        driveRobotDrive41.setMaxOutput(1.0);

        ballGrabberRightArm = new Talon(1, 6);
	LiveWindow.addActuator("BallGrabber", "RightArm", (Talon) ballGrabberRightArm);
        
        ballGrabberLeftArm = new Talon(1, 7);
	LiveWindow.addActuator("BallGrabber", "LeftArm", (Talon) ballGrabberLeftArm);
        
        pneumaticsCompressor = new Compressor(1, 14, 1, 1);
	
        
        feedbackQuadEnc1 = new Encoder(1, 1, 1, 2, false, EncodingType.k4X);
	LiveWindow.addSensor("Feedback", "QuadEnc1", feedbackQuadEnc1);
        feedbackQuadEnc1.setDistancePerPulse(1.0);
        feedbackQuadEnc1.setPIDSourceParameter(PIDSourceParameter.kRate);
        feedbackQuadEnc1.start();
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
